<?xml version="1.0" encoding="UTF-8"?>
<issues format="4" by="lint 23.0.2">

    <issue
        id="OldTargetApi"
        severity="Warning"
        message="Not targeting the latest versions of Android; compatibility modes apply. Consider testing and updating this version. Consult the android.os.Build.VERSION_CODES javadoc for details."
        category="Correctness"
        priority="6"
        summary="Checks that the manifest specifies a targetSdkVersion that is recent"
        explanation="When your application runs on a version of Android that is more recent than your `targetSdkVersion` specifies that it has been tested with, various compatibility modes kick in. This ensures that your application continues to work, but it may look out of place. For example, if the `targetSdkVersion` is less than 14, your app may get an option button in the UI.

To fix this issue, set the `targetSdkVersion` to the highest available value. Then test your app to make sure everything works correctly. You may want to consult the compatibility notes to see what changes apply to each version you are adding support for: http://developer.android.com/reference/android/os/Build.VERSION_CODES.html"
        url="http://developer.android.com/reference/android/os/Build.VERSION_CODES.html"
        urls="http://developer.android.com/reference/android/os/Build.VERSION_CODES.html"
        errorLine1="        targetSdkVersion 19"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/marianosanchez/Desktop/MobileServices_SDK/sdk/android/src/sdk/build.gradle"
            line="10"
            column="9"/>
    </issue>

    <issue
        id="UseSparseArrays"
        severity="Warning"
        message="Use new SparseArray&lt;MobileServicePushStatus>(...) instead for better performance"
        category="Performance"
        priority="4"
        summary="Looks for opportunities to replace HashMaps with the more efficient SparseArray"
        explanation="For maps where the keys are of type integer, it&apos;s typically more efficient to use the Android `SparseArray` API. This check identifies scenarios where you might want to consider using `SparseArray` instead of `HashMap` for better performance.

This is *particularly* useful when the value types are primitives like ints, where you can use `SparseIntArray` and avoid auto-boxing the values from `int` to `Integer`.

If you need to construct a `HashMap` because you need to call an API outside of your control which requires a `Map`, you can suppress this warning using for example the `@SuppressLint` annotation."
        errorLine1="  mValuesMap = new HashMap&lt;Integer, MobileServicePushStatus>(4);"
        errorLine2="               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/marianosanchez/Desktop/MobileServices_SDK/sdk/android/src/sdk/src/main/java/com/microsoft/windowsazure/mobileservices/table/sync/push/MobileServicePushStatus.java"
            line="67"
            column="16"/>
    </issue>

    <issue
        id="UseSparseArrays"
        severity="Warning"
        message="Use new SparseArray&lt;TableOperationKind>(...) instead for better performance"
        category="Performance"
        priority="4"
        summary="Looks for opportunities to replace HashMaps with the more efficient SparseArray"
        explanation="For maps where the keys are of type integer, it&apos;s typically more efficient to use the Android `SparseArray` API. This check identifies scenarios where you might want to consider using `SparseArray` instead of `HashMap` for better performance.

This is *particularly* useful when the value types are primitives like ints, where you can use `SparseIntArray` and avoid auto-boxing the values from `int` to `Integer`.

If you need to construct a `HashMap` because you need to call an API outside of your control which requires a `Map`, you can suppress this warning using for example the `@SuppressLint` annotation."
        errorLine1="  mValuesMap = new HashMap&lt;Integer, TableOperationKind>(3);"
        errorLine2="               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/marianosanchez/Desktop/MobileServices_SDK/sdk/android/src/sdk/src/main/java/com/microsoft/windowsazure/mobileservices/table/sync/operations/TableOperationKind.java"
            line="56"
            column="16"/>
    </issue>

    <issue
        id="ClickableViewAccessibility"
        severity="Warning"
        message="com/microsoft/windowsazure/mobileservices/authentication/LoginManager$6#onTouch should call View#performClick when a click is detected"
        category="Accessibility"
        priority="6"
        summary="Checks that custom views handle accessibility on click events"
        explanation="If a `View` that overrides `onTouchEvent` or uses an `OnTouchListener` does not also implement `performClick` and call it when clicks are detected, the `View` may not handle accessibility actions properly. Logic handling the click actions should ideally be placed in `View#performClick` as some accessibility services invoke `performClick` when a click action should occur."
        errorLine1="   public boolean onTouch(View view, MotionEvent event) {"
        errorLine2="                  ~~~~~~~">
        <location
            file="/Users/marianosanchez/Desktop/MobileServices_SDK/sdk/android/src/sdk/src/main/java/com/microsoft/windowsazure/mobileservices/authentication/LoginManager.java"
            line="365"
            column="19"/>
    </issue>

</issues>
